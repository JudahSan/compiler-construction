// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:

    // First level of demultiplexing using DMux
    DMux(in=in, sel=sel[2], a=a_temp, b=b_temp);
    DMux(in=a_temp, sel=sel[1], a=a, b=b);
    DMux(in=b_temp,sel=sel[1], a=c_temp, b=d_temp);

    // Second level of demultiplexing using DMux
    DMux(in=c_temp, sel=sel[0], a=c, b=d);
    DMux(in=d_temp, sel=sel[0], a=e, b=f);

    // Third level of demultiplexing using DMux
    DMux(in=0, sel=sel[0], a=g, b=h);
}

// The first level of demultiplexing uses two DMux chips. The input signal in is first demultiplexed based on sel[2], 
// and the outputs are stored in a_temp and b_temp. Then, a_temp is further demultiplexed based on sel[1], resulting in 
// the final a and b outputs. Additionally, b_temp is demultiplexed based on sel[1], and the outputs are stored in c_temp and d_temp.
// The second level of demultiplexing uses two more DMux chips. The c_temp output is demultiplexed based on sel[0], resulting 
// in the final c and d outputs. Similarly, the d_temp output is demultiplexed based on sel[0], resulting in the final e and f outputs.
// The third level of demultiplexing uses one more DMux chip. The e output is demultiplexed based on sel[0], resulting in the final g and h outputs.
