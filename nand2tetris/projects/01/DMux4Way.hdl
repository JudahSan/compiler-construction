// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux4Way.hdl

/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    // Put your code here:

    // First level of demultiplexing using DMux
    DMux(in=in, sel=sel[1], a=a_temp, b=b_temp);
    DMux(in=a_temp, sel=sel[0], a=a, b=b);

    // Second level of demultiplexing using DMux
    DMux(in=in, sel=sel[1], a=c_temp, b=d_temp);
    DMux(in=c_temp, sel=sel[0], a=c, b=d);

}

// The first level of demultiplexing uses two DMux chips. The input signal in is first demultiplexed based on sel[1], 
//  and the outputs are stored in a_temp and b_temp. Then, a_temp is further demultiplexed based on sel[0], resulting in the final a and b outputs.
// The second level of demultiplexing also uses two DMux chips. The input signal in is again demultiplexed based on
//  sel[1], and the outputs are stored in c_temp and d_temp. Then, c_temp is further demultiplexed based on sel[0], resulting in the final c and d outputs.
